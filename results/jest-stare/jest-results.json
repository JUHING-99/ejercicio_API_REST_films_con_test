{
  "numFailedTestSuites": 1,
  "numFailedTests": 4,
  "numPassedTestSuites": 2,
  "numPassedTests": 5,
  "numPendingTestSuites": 0,
  "numPendingTests": 0,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 0,
  "numTotalTestSuites": 3,
  "numTotalTests": 9,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1699226597624,
  "success": false,
  "testResults": [
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1699226598918,
        "runtime": 819,
        "slow": false,
        "start": 1699226598099
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\test\\env.test.js",
      "testResults": [
        {
          "ancestorTitles": [
            "Environment setup"
          ],
          "duration": 18,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Environment setup should have a .env file in the root directory",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should have a .env file in the root directory"
        },
        {
          "ancestorTitles": [
            "Environment setup"
          ],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Environment setup should have API_KEY defined in the .env file",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should have API_KEY defined in the .env file"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1699226599152,
        "runtime": 1059,
        "slow": false,
        "start": 1699226598093
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\test\\fetchFilms.test.js",
      "testResults": [
        {
          "ancestorTitles": [
            "fetchFilm utility"
          ],
          "duration": 187,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fetchFilm utility should return movie details for a known movie",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return movie details for a known movie"
        },
        {
          "ancestorTitles": [
            "fetchFilm utility"
          ],
          "duration": 34,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fetchFilm utility should return null for a non-existent movie",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return null for a non-existent movie"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 4,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1699226604777,
        "runtime": 6660,
        "slow": true,
        "start": 1699226598117
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\test\\films.test.js",
      "testResults": [
        {
          "ancestorTitles": [
            "Films API routes"
          ],
          "duration": 126,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Films API routes should fetch a movie by title",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should fetch a movie by title"
        },
        {
          "ancestorTitles": [
            "Films API routes"
          ],
          "duration": 5009,
          "failureDetails": [
            {},
            {
              "message": "thrown: \"Exceeded timeout of 5000 ms for a test.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\""
            }
          ],
          "failureMessages": [
            "TypeError: Cannot convert undefined or null to object\n    at Function.entries (<anonymous>)\n    at entries (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\routes\\films.js:7:16)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
            "Error: thrown: \"Exceeded timeout of 5000 ms for a test.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n    at it (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\test\\films.test.js:13:3)\n    at _dispatchDescribe (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\node_modules\\jest-circus\\build\\index.js:91:26)\n    at describe (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\node_modules\\jest-circus\\build\\index.js:55:5)\n    at Object.describe (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\test\\films.test.js:5:1)\n    at Runtime._execModule (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at jestAdapter (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:77:13)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runTestInternal (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"
          ],
          "fullName": "Films API routes should return 404 for a non-existent movie",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "failed",
          "title": "should return 404 for a non-existent movie"
        },
        {
          "ancestorTitles": [
            "Films API routes"
          ],
          "duration": 40,
          "failureDetails": [
            {
              "matcherResult": {
                "actual": 404,
                "expected": 200,
                "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m",
                "name": "toBe",
                "pass": false
              }
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at Object.toBe (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\test\\films.test.js:28:33)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "fullName": "Films API routes should add a new movie",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "failed",
          "title": "should add a new movie"
        },
        {
          "ancestorTitles": [
            "Films API routes"
          ],
          "duration": 4,
          "failureDetails": [
            {
              "matcherResult": {
                "actual": 404,
                "expected": 200,
                "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m",
                "name": "toBe",
                "pass": false
              }
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at Object.toBe (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\test\\films.test.js:41:33)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "fullName": "Films API routes should update an existing movie",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "failed",
          "title": "should update an existing movie"
        },
        {
          "ancestorTitles": [
            "Films API routes"
          ],
          "duration": 3,
          "failureDetails": [
            {
              "matcherResult": {
                "actual": 404,
                "expected": 200,
                "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m",
                "name": "toBe",
                "pass": false
              }
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at Object.toBe (C:\\Users\\c-r-i\\OneDrive\\Escritorio\\Cris\\BOOTCAMP\\core\\backend\\ejPelis\\ejercicio_API_REST_films_con_test\\test\\films.test.js:50:33)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "fullName": "Films API routes should delete an existing movie",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "failed",
          "title": "should delete an existing movie"
        }
      ],
      "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFilms API routes › should return 404 for a non-existent movie\u001b[39m\u001b[22m\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.entries (<anonymous>)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  5 |\u001b[39m     \u001b[36mlet\u001b[39m film \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetchFilm(req\u001b[33m.\u001b[39mparams\u001b[33m.\u001b[39mtitle)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  6 |\u001b[39m     \u001b[36mconst\u001b[39m newObj \u001b[33m=\u001b[39m \u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mfromEntries(\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m  7 |\u001b[39m         \u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mentries(film)\u001b[33m.\u001b[39mmap(([k\u001b[33m,\u001b[39m v]) \u001b[33m=>\u001b[39m [k\u001b[33m.\u001b[39mtoLowerCase()\u001b[33m,\u001b[39m v])\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    |\u001b[39m                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  8 |\u001b[39m       )\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m     console\u001b[33m.\u001b[39mlog(newObj)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 10 |\u001b[39m     res\u001b[33m.\u001b[39mstatus(\u001b[35m200\u001b[39m)\u001b[33m.\u001b[39mjson(newObj)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat entries (\u001b[22m\u001b[2mroutes/films.js\u001b[2m:7:16)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFilms API routes › should return 404 for a non-existent movie\u001b[39m\u001b[22m\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 11 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 13 |\u001b[39m   it(\u001b[32m'should return 404 for a non-existent movie'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    |\u001b[39m   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 14 |\u001b[39m     \u001b[36mconst\u001b[39m title \u001b[33m=\u001b[39m \u001b[32m'NonExistentMovie12345'\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m`/api/film/${title}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 16 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m\u001b[33m,\u001b[39m \u001b[32m`Expected status code 404 for a non-existent movie '${title}', but got ${response.statusCode}.`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat it (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/films.test.js\u001b[39m\u001b[0m\u001b[2m:13:3)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.describe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/films.test.js\u001b[39m\u001b[0m\u001b[2m:5:1)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFilms API routes › should add a new movie\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m404\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 26 |\u001b[39m     }\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 27 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39mpost(\u001b[32m'/api/film/'\u001b[39m)\u001b[33m.\u001b[39msend(movie)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 28 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m\u001b[33m,\u001b[39m \u001b[32m`Expected status code 200 when adding a new movie, but got ${response.statusCode}.`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 29 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m`Se ha guardado ${movie.title}`\u001b[39m\u001b[33m,\u001b[39m \u001b[32m`Expected confirmation message for adding movie '${movie.title}', but got a different message.`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/films.test.js\u001b[39m\u001b[0m\u001b[2m:28:33)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFilms API routes › should update an existing movie\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m404\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 39 |\u001b[39m     }\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 40 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39mput(\u001b[32m'/api/film/'\u001b[39m)\u001b[33m.\u001b[39msend(updatedMovie)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 41 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m\u001b[33m,\u001b[39m \u001b[32m`Expected status code 200 when updating a movie, but got ${response.statusCode}.`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 42 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m`Se ha actualizado ${updatedMovie.title}`\u001b[39m\u001b[33m,\u001b[39m \u001b[32m`Expected confirmation message for updating movie '${updatedMovie.title}', but got a different message.`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 43 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 44 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/films.test.js\u001b[39m\u001b[0m\u001b[2m:41:33)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFilms API routes › should delete an existing movie\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m404\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 48 |\u001b[39m     }\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 49 |\u001b[39m     \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mdelete\u001b[39m(\u001b[32m'/api/film/'\u001b[39m)\u001b[33m.\u001b[39msend(movie)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 50 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m\u001b[33m,\u001b[39m \u001b[32m`Expected status code 200 when deleting a movie, but got ${response.statusCode}.`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 51 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m`Se ha borrado la película con ID: ${movie.id}`\u001b[39m\u001b[33m,\u001b[39m \u001b[32m`Expected confirmation message for deleting movie with ID '${movie.id}', but got a different message.`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 52 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 53 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/films.test.js\u001b[39m\u001b[0m\u001b[2m:50:33)\u001b[22m\u001b[2m\u001b[22m\n"
    }
  ],
  "wasInterrupted": false
}